:py:mod:`modular_robot_simulation`
==================================

.. py:module:: modular_robot_simulation

.. autoapi-nested-parse::

   Everything for the simulation of modular robots.



Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   simulation_states/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   modular_robot_simulation.ModularRobotScene
   modular_robot_simulation.Terrain



Functions
~~~~~~~~~

.. autoapisummary::

   modular_robot_simulation.simulate_scenes
   modular_robot_simulation.test_robot



.. py:class:: ModularRobotScene


   A scene of modular robots in a terrain.

   .. py:attribute:: terrain
      :type: modular_robot_simulation._terrain.Terrain

      The terrain of the scene.


   .. py:method:: add_robot(robot: revolve2.modular_robot.ModularRobot, pose: revolve2.simulation.scene.Pose = Pose(), translate_z_aabb: bool = True) -> None

      Add a robot to the scene.

      :param robot: The robot to add.
      :param pose: The pose of the robot.
      :param translate_z_aabb: Whether the robot should be translated upwards so it's T-pose axis-aligned bounding box is exactly on the ground. I.e. if the robot should be placed exactly on the ground. The pose parameters is still added afterwards.


   .. py:method:: add_interactive_object(interactive_object: revolve2.simulation.scene.MultiBodySystem) -> None

      Add an intractable object to the scene.

      :param interactive_object: The object as a multi body system.


   .. py:method:: to_simulation_scene() -> tuple[revolve2.simulation.scene.Scene, dict[revolve2.simulation.scene.UUIDKey[revolve2.modular_robot.ModularRobot], revolve2.simulation.scene.MultiBodySystem], list[revolve2.simulation.scene.UUIDKey[revolve2.simulation.scene.MultiBodySystem]]]

      Convert this to a simulation scene.

      :returns: The created scene.



.. py:function:: simulate_scenes(simulator: revolve2.simulation.simulator.Simulator, batch_parameters: revolve2.simulation.simulator.BatchParameters, scenes: modular_robot_simulation._modular_robot_scene.ModularRobotScene, record_settings: revolve2.simulation.simulator.RecordSettings | None = None) -> list[modular_robot_simulation.simulation_states.SceneSimulationState]
                 simulate_scenes(simulator: revolve2.simulation.simulator.Simulator, batch_parameters: revolve2.simulation.simulator.BatchParameters, scenes: list[modular_robot_simulation._modular_robot_scene.ModularRobotScene], record_settings: revolve2.simulation.simulator.RecordSettings | None = None) -> list[list[modular_robot_simulation.simulation_states.SceneSimulationState]]

   Simulate one or more scenes.

   :param simulator: The simulator to use for simulation.
   :param batch_parameters: The batch parameters to use for simulation.
   :param scenes: One or more scenes to simulate.
   :param record_settings: The optional record settings to use during simulation.
   :returns: A list of simulation states for each scene in the provided batch.


.. py:class:: Terrain


   Terrain consising of only static geometry.

   .. py:attribute:: static_geometry
      :type: list[revolve2.simulation.scene.geometry.Geometry]

      The static geometry that defines the terrain.



.. py:function:: test_robot(robot: revolve2.modular_robot.ModularRobot | revolve2.modular_robot.body.base.Body, terrain: modular_robot_simulation._terrain.Terrain, simulator: revolve2.simulation.simulator.Simulator, batch_parameters: revolve2.simulation.simulator.BatchParameters) -> None

   Test a robot with a manual brain.

   :param robot: The ModularRobot or Body instance.
   :param terrain: The terrain to test on.
   :param simulator: The simulator.
   :param batch_parameters: The batch parameters.


