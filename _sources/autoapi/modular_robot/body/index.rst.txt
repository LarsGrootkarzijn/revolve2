:py:mod:`body`
============================

.. py:module:: modular_robot.body

.. autoapi-nested-parse::

   Modular robot bodies.



Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   base/index.rst
   sensors/index.rst
   v1/index.rst
   v2/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   modular_robot.body.AttachmentPoint
   modular_robot.body.Color
   modular_robot.body.Module
   modular_robot.body.RightAngles




.. py:class:: AttachmentPoint


   An attachment point on the parent module for the child.

   .. py:attribute:: orientation
      :type: pyrr.Quaternion

      The orientation of the attachment point on the module.


   .. py:attribute:: offset
      :type: pyrr.Vector3

      The offset for the attachment point, with respect to the center of the module.



.. py:class:: Color


   Represents a color in RGBA format.

   All values should from 0 to 255.

   .. py:attribute:: red
      :type: int

      

   .. py:attribute:: green
      :type: int

      

   .. py:attribute:: blue
      :type: int

      

   .. py:attribute:: alpha
      :type: int

      

   .. py:method:: to_normalized_rgba_list() -> list[float]

      Convert to rgba list where each value is between 0 and 1.

      :returns: The list.



.. py:class:: Module(rotation: float | modular_robot.body._right_angles.RightAngles, color: modular_robot.body._color.Color, attachment_points: dict[int, modular_robot.body._attachment_point.AttachmentPoint])


   Base class for a module for modular robots.

   .. py:property:: uuid
      :type: uuid.UUID

      Get the uuid.

      :returns: The uuid.


   .. py:property:: rotation
      :type: float

      Get the orientation of this model relative to its parent.

      :returns: The orientation.


   .. py:property:: parent
      :type: Module | None

      Get the parent module of this module.

      None if this module has not yet been added to a body.

      :returns: The parent module of this module, or None if this module has not yet been added to a body.


   .. py:property:: parent_child_index
      :type: int | None

      Index of this module in the parent modules child list.

      None if this module has not yet been added to a body.

      :returns: The index of this module in the parent modules child list, or None if this module has not yet been added to a body.


   .. py:property:: children
      :type: dict[int, Module]

      Get all children on this module.

      :return: The children and their respective attachment point index.


   .. py:property:: color
      :type: modular_robot.body._color.Color

      Get the color of this module.

      :returns: The color.


   .. py:property:: attachment_points
      :type: dict[int, modular_robot.body._attachment_point.AttachmentPoint]

      Get all attachment points of this module.

      :return: The attachment points.


   .. py:method:: set_child(module: Module, child_index: int) -> None

      Attach a module to a slot.

      :param module: The module to attach.
      :param child_index: The slot to attach it to.
      :raises KeyError: If attachment point is already populated.


   .. py:method:: can_set_child(module: Module, child_index: int) -> bool

      Check if a child can be set onto a specific index.

      This is for more advanced conflict checks, such as big modules that have the possibility to block other attachment points from being populated.
      By default this returns true, since the basic modules do not block other attachment points.

      :param module: The module to set.
      :param child_index: The child index to check.
      :return: Whether it is possible.


   .. py:method:: neighbours(within_range: int) -> list[Module]

      Get the neighbours of this module with a certain range of the module tree.

      :param within_range: The range in which modules are considered a neighbour. Minimum is 1.
      :returns: The neighbouring modules.


   .. py:method:: is_free(index: int) -> bool

      Return if the attachment-point is free.

      :param index: The index to check.
      :return: The boolean.



.. py:class:: RightAngles(*args, **kwds)


   Bases: :py:obj:`enum.Enum`

   .. autoapi-inheritance-diagram:: modular_robot.body.RightAngles
      :parts: 1

   Standard angles at which  modular robot modules can be attached.

   .. py:attribute:: DEG_0
      :value: 0

      

   .. py:attribute:: DEG_90

      

   .. py:attribute:: DEG_180

      

   .. py:attribute:: DEG_270

      

   .. py:attribute:: RAD_0
      :value: 0

      

   .. py:attribute:: RAD_HALFPI

      

   .. py:attribute:: RAD_PI

      

   .. py:attribute:: RAD_ONEANDAHALFPI

      


