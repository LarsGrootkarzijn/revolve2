:py:mod:`sensors`
====================================

.. py:module:: modular_robot.body.sensors

.. autoapi-nested-parse::

   Base Sensors for Modular Robots.



Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   modular_robot.body.sensors.ActiveHingeSensor
   modular_robot.body.sensors.CameraSensor
   modular_robot.body.sensors.IMUSensor
   modular_robot.body.sensors.Sensor




.. py:class:: ActiveHingeSensor(rotation: float = 0.0)


   Bases: :py:obj:`modular_robot.body.sensors._sensor.Sensor`

   .. autoapi-inheritance-diagram:: modular_robot.body.sensors.ActiveHingeSensor
      :parts: 1

   A sensors for an active hinge that measures its angle.


.. py:class:: CameraSensor(position: pyrr.Vector3, rotation: float = 0.0, camera_size: tuple[int, int] = (50, 50))


   Bases: :py:obj:`modular_robot.body.sensors._sensor.Sensor`

   .. autoapi-inheritance-diagram:: modular_robot.body.sensors.CameraSensor
      :parts: 1

   A camera for the Modular Robot.

   .. py:property:: position
      :type: pyrr.Vector3

      Get the position of the camera.

      :return: The position.


   .. py:property:: camera_size
      :type: tuple[int, int]

      Get the size of the camera.

      :return: The camera size.



.. py:class:: IMUSensor(position: pyrr.Vector3, rotation: float = 0.0)


   Bases: :py:obj:`modular_robot.body.sensors._sensor.Sensor`

   .. autoapi-inheritance-diagram:: modular_robot.body.sensors.IMUSensor
      :parts: 1

   An inertial measurement unit.

   Reports specific force(closely related to acceleration), angular rate(closely related to angular velocity), and orientation.


.. py:class:: Sensor(rotation: float, position: pyrr.Vector3 = Vector3([0, 0, 0]))


   Bases: :py:obj:`abc.ABC`

   .. autoapi-inheritance-diagram:: modular_robot.body.sensors.Sensor
      :parts: 1

   An abstract Sensor Class.

   .. py:property:: uuid
      :type: uuid.UUID

      Get the uuid of the sensor.

      :return: The uuid.


   .. py:property:: rotation
      :type: float

      Return the rotation of the sensor.

      :return: The rotation.


   .. py:property:: position
      :type: pyrr.Vector3

      Get the position of the sensor on a module.

      :return: The position.



